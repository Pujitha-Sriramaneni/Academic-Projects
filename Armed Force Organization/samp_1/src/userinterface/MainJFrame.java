/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import Business.EcoSystem;
import Business.ConfigureASystem;
import Business.DB4OUtil.DB4OUtil;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import userinterface.DoctorAppointment.DoctorAppointment;
import userinterface.PositionWorkArea.HeadJPanel;
import userinterface.PositionWorkArea.SoldierDisplayJPanel;
import userinterface.PositionWorkArea.TrainerDisplayJPanel;
import userinterface.PositionWorkArea.VeteranDisplayJPanel;
import userinterface.weapons.WaWeaponsJPanel;

/**
 *
 * @author Administrator
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    JPanel userProcessContainer;
    Enterprise enterprise;

    public MainJFrame() {
        initComponents();
        system = dB4OUtil.retrieveSystem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        loginJButton = new javax.swing.JButton();
        userNameJTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        MainComboBox = new javax.swing.JComboBox<>();
        container = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        loginJButton.setBackground(new java.awt.Color(204, 204, 0));
        loginJButton.setText("Login");
        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginJButtonActionPerformed(evt);
            }
        });

        userNameJTextField.setBackground(new java.awt.Color(204, 204, 0));

        passwordField.setBackground(new java.awt.Color(204, 204, 0));

        jLabel1.setText("User Name");

        jLabel2.setText("Password");

        logoutJButton.setBackground(new java.awt.Color(204, 204, 0));
        logoutJButton.setText("Logout");
        logoutJButton.setEnabled(false);
        logoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutJButtonActionPerformed(evt);
            }
        });

        MainComboBox.setBackground(new java.awt.Color(204, 204, 0));
        MainComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "admin", "soldier", "trainer", "veteran", "doctor", "head", "weapon authorizer" }));
        MainComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(MainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addComponent(userNameJTextField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(loginJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(logoutJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(loginJLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(MainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(loginJButton)
                .addGap(8, 8, 8)
                .addComponent(loginJLabel)
                .addGap(27, 27, 27)
                .addComponent(logoutJButton)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        container.setBackground(new java.awt.Color(153, 153, 153));
        container.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(container);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginJButtonActionPerformed
        try {
            // Get user name
            String userName = userNameJTextField.getText();
            // Get Password
            char[] passwordCharArray = passwordField.getPassword();
            String password = String.valueOf(passwordCharArray);
            String role = MainComboBox.getSelectedItem().toString();
            boolean loginsucess = false;
            //step1
            System.out.println("role" + role);
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/sys", "root", "");
            Statement st = conn.createStatement();
            
            UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
            Enterprise inEnterprise = null;
            Organization inOrganization = null;
            if (role.equalsIgnoreCase("ADMIN")) {
                if (userAccount == null) {
                    //step2:
                    for (Network network : system.getNetworkList()) {
                        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                            //step 2.1
                            userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount == null) {
                                //step 3:
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                    
                                    if (userAccount != null) {
                                        inEnterprise = enterprise;
                                        inOrganization = organization;
                                        
                                        break;
                                    }
                                }
                            } else {
                                inEnterprise = enterprise;
                                break;
                                
                            }
                            if (inOrganization != null) {
                                break;
                            }
                            
                        }
                        if (inEnterprise != null) {
                            break;
                        }

                    }
                }
                if (userAccount == null) {
                    JOptionPane.showMessageDialog(null, "Invalid credentials");
                    return;
                } else {
                    loginsucess = true;
                    CardLayout layout = (CardLayout) container.getLayout();
                    container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system));
                    layout.next(container);
                }
            } else if (role.equalsIgnoreCase("SOLDIER")) {
                String query = "select * from soldier_details where username = \"" + userName + "\" and password = \"" + password + "\"";
                try {
                    ResultSet rs = st.executeQuery(query);                   
                    if (rs.next()) {
                        //String user = rs.getString("username");
                        System.out.print(userName);
                        SoldierDisplayJPanel hp = new SoldierDisplayJPanel(userName,container);
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("SoldierDisplayJPanel", hp);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    rs.close();
                    conn.close();
                    
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else if (
                    role.equalsIgnoreCase("TRAINER")) {
                String query = "select * from trainer_details where username = \"" + userName + "\" and password = \"" + password + "\"";
                try {
                    
                    ResultSet rs = st.executeQuery(query);
                    
                    if (rs.next()) {     
                        System.out.print(userName);
                        TrainerDisplayJPanel hp = new TrainerDisplayJPanel(userName,container);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("TrainerDisplayJPanel", hp);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    rs.close();
                    conn.close();
                } catch (Exception e) {
                    System.out.println("Error");
                }
            } else if (role.equalsIgnoreCase("VETERAN")) {
                String query = "select * from veteran_details where username = \"" + userName + "\" and password = \"" + password + "\"";
                try {
                    ResultSet rs = st.executeQuery(query);
                    if (rs.next()) {                       
                        VeteranDisplayJPanel vp = new VeteranDisplayJPanel(userName);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("VeteranDisplayJPanel", vp);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    rs.close();
                    conn.close();
                } catch (Exception e) {
                    System.out.println("Error");
                }
            } else if (role.equalsIgnoreCase("DOCTOR")) {
                /*String a= userNameJTextField.getText();
                String b = passwordField.getText();
if(a.equals("doctor") && b.equals("doctor")){
   DoctorAppointment da = new DoctorAppointment(userName);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("DoctorAppointment", da);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
}                
else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
            }*/
//String query = "select * from doctor_details where username = \"" + userName + "\" and password = \"" + password + "\"";
               try {
                    //ResultSet rs = st.executeQuery(query);
                    String a= userNameJTextField.getText();
                String b = passwordField.getText();
                    if ((a.equals("doctor1") && b.equals("doctor1")) ||a.equals("doctor9") && b.equals("doctor9") ) {                       
                        DoctorAppointment da = new DoctorAppointment(userName);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("DoctorAppointment", da);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    //rs.close();
                    //conn.close();
                } catch (Exception e) {
                    System.out.println("Error");
                }
            }
            
            else if (role.equalsIgnoreCase("WEAPON AUTHORIZER")) {
                try {
                    //ResultSet rs = st.executeQuery(query);
                    String a= userNameJTextField.getText();
                String b = passwordField.getText();
                    if ((a.equals("weapona") && b.equals("weapona")) ||a.equals("SnehaK") && b.equals("Potato") ) {                       
                        WaWeaponsJPanel wpn = new WaWeaponsJPanel(container,enterprise);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("WaWeaponsJPanel", wpn);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    //rs.close();
                    //conn.close();
                } catch (Exception e) {
                    System.out.println("Error");
                }
            }
              else if (role.equalsIgnoreCase("head")) {
                try {
                    //ResultSet rs = st.executeQuery(query);
                    String a= userNameJTextField.getText();
                String b = passwordField.getText();
                    if ((a.equals("Head") && b.equals("Head")) ) {                       
                        HeadJPanel hp = new HeadJPanel(container,enterprise);                       
                        container.removeAll();
                        //JPanel blankJP = new JPanel();
                        container.add("HeadJPanel", hp);
                        CardLayout crdLyt = (CardLayout) container.getLayout();
                        crdLyt.next(container);
                        loginsucess = true;
                        JOptionPane.showMessageDialog(null, "Login Sucessfull");
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid credentials");
                    }
                    //rs.close();
                    //conn.close();
                } catch (Exception e) {
                    System.out.println("Error");
                }
            }
            
            if (loginsucess) {
                loginJButton.setEnabled(false);
                
                userNameJTextField.setEnabled(false);
                passwordField.setEnabled(false);
            }
            logoutJButton.setEnabled(true);
                
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_loginJButtonActionPerformed

    private void logoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutJButtonActionPerformed
        logoutJButton.setEnabled(false);
        userNameJTextField.setEnabled(true);
        passwordField.setEnabled(true);
        loginJButton.setEnabled(true);

        userNameJTextField.setText("");
        passwordField.setText("");

        container.removeAll();
        JPanel blankJP = new JPanel();
        container.add("blank", blankJP);
        CardLayout crdLyt = (CardLayout) container.getLayout();
        crdLyt.next(container);
        dB4OUtil.storeSystem(system);
    }//GEN-LAST:event_logoutJButtonActionPerformed

    private void MainComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MainComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> MainComboBox;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginJButton;
    private javax.swing.JLabel loginJLabel;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField userNameJTextField;
    // End of variables declaration//GEN-END:variables
}
